//SFML C++ PACMAN pt 2
//created by Dr. Mo 11/21
//dynamicsofanasteroid.com

#include<iostream>
#include "SFML/Graphics.hpp"
using namespace std;

enum DIRECTIONS { LEFT, RIGHT, UP, DOWN }; //left is 0, right is 1, up is 2, down is 3

int main() {
    //game set up (you'll need these lines in every game)
    sf::RenderWindow screen(sf::VideoMode(1000, 1000), "breakout"); //set up screen
    sf::Event event; //set up event queue
    sf::Clock clock; //set up the clock (needed for game timing)
    const float FPS = 60.0f; //FPS
    screen.setFramerateLimit(FPS); //set FPS

    //load in images
    sf::Texture brick;
    brick.loadFromFile("brick.png");
    sf::Sprite wall;
    wall.setTexture(brick);

    int map[20][20] = {
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,1,
        1,2,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        1,2,1,2,2,2,2,1,2,1,2,1,2,1,2,2,2,1,2,1,
        1,2,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        1,2,1,2,2,2,2,1,2,2,2,2,2,2,2,1,2,1,2,1,
        1,2,1,2,1,1,1,2,2,2,2,2,2,1,2,2,2,1,2,1,
        1,2,1,2,1,2,2,2,2,2,2,2,1,2,2,1,2,2,2,1,
        1,2,2,2,2,2,1,2,1,2,2,2,1,2,1,1,1,1,2,1,
        1,1,1,1,2,1,2,2,1,1,1,2,2,2,1,2,2,2,2,1,
        1,2,2,1,2,2,2,1,1,2,2,2,1,2,1,2,1,1,2,1,
        1,2,2,2,1,2,1,1,2,2,1,1,1,2,2,2,2,1,2,1,
        1,2,1,2,1,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,
        1,2,1,2,1,1,2,1,1,2,1,2,1,1,2,1,1,1,2,1,
        1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,1,2,1,
        1,2,1,2,1,2,1,1,2,1,1,1,1,2,1,2,2,2,1,1,
        1,2,1,2,1,2,2,1,2,1,2,2,1,2,1,1,1,2,2,1,
        1,2,1,2,1,2,2,2,1,1,1,2,1,2,2,1,2,1,2,1,
        1,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,1,2,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
    };

    //player setup
    int xpos = 85;
    int ypos = 85;
    int vx = 0;
    int vy = 0;
    int radius = 35;
    sf::CircleShape player(radius);
    player.setFillColor(sf::Color(250, 250, 0)); //using RGB value for color here (hex also works)
    player.setPosition(xpos, ypos); //top left "corner" of circle (not center!)
    bool keys[] = { false, false, false, false };

    sf::CircleShape dot(5);
    dot.setFillColor(sf::Color(250, 250, 250)); //using RGB value for color here (hex also works)

    sf::Texture pacman;
    pacman.loadFromFile("pac.png");
    sf::IntRect pac(0, 0, 62, 62);
    sf::Sprite playerImg(pacman, pac);

    int ticker = 0;
    int frameNum = 0;
    int rowNum = 0;
    int direction = 0;
    //################### HOLD ONTO YOUR BUTTS, ITS THE GAME LOOP###############################################################
    while (screen.isOpen()) {//keep window open until user shuts it down

        while (screen.pollEvent(event)) { //look for events-----------------------

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                screen.close();
            //KEYBOARD INPUT 
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) || sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
                keys[LEFT] = true;
            }
            else keys[LEFT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) || sf::Keyboard::isKeyPressed(sf::Keyboard::D)) {
                keys[RIGHT] = true;
            }
            else keys[RIGHT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) || sf::Keyboard::isKeyPressed(sf::Keyboard::W)) {
                keys[UP] = true;
            }
            else keys[UP] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) || sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
                keys[DOWN] = true;
            }
            else keys[DOWN] = false;


        }//end event loop---------------------------------------------------------------

         //move Mr. Pac
        if (keys[LEFT] || keys[RIGHT])
            vx = -5 * (keys[LEFT] ? 1 : -1);
        else
            vx = 0;

        if (keys[UP] || keys[DOWN])
            vy = -5 * (keys[UP] ? 1 : -1);
        else
            vy = 0;


        //collision
        if (vx > 0 && map[(ypos) / 50][(xpos + radius * 2 + 3) / 50] == 1)
            vx = 0;
        if (vx < 0 && map[(ypos) / 50][(xpos - 3) / 50] == 1)
            vx = 0;
        if (vy > 0 && map[(ypos + radius * 2 + 3) / 50][(xpos) / 50] == 1)
            vy = 0;
        if (vy < 0 && map[(ypos - 3) / 50][(xpos) / 50] == 1)
            vy = 0;

        xpos += vx;
        ypos += vy;

        if (keys[LEFT]) direction = LEFT;
        if (keys[RIGHT]) direction = RIGHT;
        if (keys[UP]) direction = UP;
        if (keys[DOWN]) direction = DOWN;

        //animate player
        if (vx != 0 || vy != 0) {
            ticker += 1;
            if (ticker % 10 == 0)
                frameNum += 1;
            if (frameNum > 3)
                frameNum = 0;
        }
        if (direction == RIGHT) rowNum = 0;
        else if (direction == LEFT) rowNum = 1;
        else if (direction == UP)rowNum = 2;
        else rowNum = 3;


        pac = sf::IntRect(frameNum * 62, rowNum * 62, 62, 62);
        sf::Sprite playerImg(pacman, pac);
        playerImg.setPosition(xpos, ypos);

        player.setPosition(xpos, ypos);


        //render section-----------------------------------------
        screen.clear(); //wipes screen, without this things smear

        //draw map
        for (int rows = 0; rows < 20; rows++)
            for (int cols = 0; cols < 20; cols++) {
                if (map[rows][cols] == 1) {
                    wall.setPosition(cols * 50, rows * 50);
                    screen.draw(wall);
                }
                if (map[rows][cols] == 2) {
                    dot.setPosition(cols * 50 + 25, rows * 50 + 25);
                    screen.draw(dot);
                }
            }
        screen.draw(playerImg); //draw player
        screen.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "goodbye!" << endl;
} //end of main
